[
  {
    "title": "パフォーマンス改善: データベースクエリの最適化",
    "body": "## 問題の概要\nユーザー一覧ページの読み込みが非常に遅くなっています。\n\n## 現在の状況\n- ページ読み込みに10秒以上かかる\n- データベースクエリが複数回実行されている\n- N+1問題が発生している可能性\n\n## 改善案\n- クエリの結合処理\n- インデックスの見直し\n- キャッシュ機能の導入\n\n## 期待される効果\nページ読み込み時間を3秒以内に短縮",
    "labels": [ "performance", "database", "high-priority" ],
    "assignees": []
  },
  {
    "title": "セキュリティ: XSS脆弱性の修正",
    "body": "## 脆弱性の詳細\nコメント投稿機能でXSS攻撃が可能な状態です。\n\n## 影響範囲\n- コメント表示部分\n- ユーザープロフィール編集\n- 投稿タイトル表示\n\n## 修正方針\n- 入力値のサニタイズ処理\n- HTML エスケープ処理の強化\n- CSP（Content Security Policy）の導入\n\n## 優先度\n最高（セキュリティ関連）",
    "labels": [ "security", "critical", "vulnerability" ],
    "assignees": []
  },
  {
    "title": "UI/UX改善: モバイル対応の強化",
    "body": "## 改善の背景\nモバイルユーザーからの使いにくさに関する報告が増加しています。\n\n## 現在の問題\n- タッチ操作に適していないボタンサイズ\n- 画面サイズに応じた適切なレイアウトになっていない\n- フォーム入力時のキーボード表示で画面が崩れる\n\n## 改善内容\n- レスポンシブデザインの見直し\n- タッチフレンドリーなUI要素への変更\n- モバイル専用ナビゲーションの実装\n\n## 対象デバイス\niOS、Android スマートフォン・タブレット",
    "labels": [ "ui", "ux", "mobile", "enhancement" ],
    "assignees": []
  },
  {
    "title": "バグ修正: ファイルアップロードの失敗",
    "body": "## バグの詳細\n特定の条件下でファイルアップロードが失敗します。\n\n## 再現条件\n- ファイルサイズが5MB以上\n- ファイル名に日本語が含まれる\n- 特定のブラウザ（Safari、Edge）\n\n## エラー内容\n- 「アップロードに失敗しました」のメッセージ\n- サーバーログにエンコーディングエラー\n- 一部ファイルが破損した状態で保存される\n\n## 修正予定\n- ファイル名のエンコーディング処理改善\n- アップロードサイズ制限の見直し\n- エラーハンドリングの強化",
    "labels": [ "bug", "file-upload", "medium-priority" ],
    "assignees": []
  },
  {
    "title": "新機能: 通知システムの実装",
    "body": "## 機能の概要\nユーザーに重要な情報をリアルタイムで通知するシステムを構築します。\n\n## 実装内容\n### フロントエンド\n- 画面右上に通知アイコン\n- 未読通知数の表示\n- 通知一覧のポップアップ表示\n\n### バックエンド\n- WebSocket接続によるリアルタイム通知\n- 通知データのデータベース設計\n- 通知設定のユーザーカスタマイズ\n\n## 通知種別\n- システムメンテナンス情報\n- 新機能のお知らせ\n- セキュリティ関連の警告\n- 個人宛メッセージ\n\n## 技術要件\n- WebSocket または Server-Sent Events\n- プッシュ通知（PWA対応時）",
    "labels": [ "feature", "notification", "websocket", "enhancement" ],
    "assignees": []
  },
  {
    "title": "インフラ: CI/CDパイプラインの構築",
    "body": "## 目的\n開発効率の向上と品質保証のためのCI/CDパイプラインを構築します。\n\n## 現在の課題\n- 手動デプロイによる人的ミス\n- テスト実行の忘れ\n- 本番環境とステージング環境の差異\n- デプロイ時間の長さ\n\n## 実装予定\n### CI（継続的インテグレーション）\n- 自動テスト実行（単体テスト、統合テスト）\n- コード品質チェック（ESLint、SonarQube）\n- セキュリティスキャン\n- ビルド成果物の生成\n\n### CD（継続的デプロイ）\n- ステージング環境への自動デプロイ\n- 本番環境へのワンクリックデプロイ\n- ロールバック機能\n- 環境別設定管理\n\n## 使用技術\n- GitHub Actions または GitLab CI\n- Docker コンテナ\n- AWS または Azure",
    "labels": [ "infrastructure", "ci-cd", "devops", "automation" ],
    "assignees": []
  }
]